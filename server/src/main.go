package main

import (
	"context"
	"flag"
	"fmt"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"net/http"
	"os"
	"os/signal"
	"src/db"
	"time"

	//_ "src/docs" // docs is generated by Swag CLI, you have to import it.
	"log"
	logrus "src/log"
	"src/route"
	"src/util/config"
)

var configFile = flag.String("config", "../config/config.yaml", "配置文件路径")

func init() {
	flag.Parse()

	config.InitConfig(*configFile) // 初始化配置
	logrus.InitLogrus()            // 初始化日志
	db.InitDB()                    // 初始化数据库
}

// @title demo-gin-mpvue
// @version 0.0.1
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url
// @contact.email chenganggo@gmail.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1/
func main() {
	r := route.InitRouter() //初始化路由

	// use ginSwagger middleware to
	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json") // The url pointing to API definition
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	//r.Run(config.Conf.Port)

	server := &http.Server{
		Addr:         config.Conf.Port,
		Handler:      r,
		ReadTimeout:  time.Duration(config.Conf.Timeout.AppRead) * time.Second,
		WriteTimeout: time.Duration(config.Conf.Timeout.AppWrite) * time.Second,
	}

	fmt.Println("|-----------------------------------|")
	fmt.Println("|            " + config.Conf.AppName + "             |")
	fmt.Println("|-----------------------------------|")
	fmt.Println("|  Go Http Server Start Successful  |")
	fmt.Println("|    Port" + config.Conf.Port + "     Pid:" + fmt.Sprintf("%d", os.Getpid()) + "        |")
	fmt.Println("|-----------------------------------|")
	fmt.Println("")

	go func() {
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("HTTP server listen: %s\n", err)
		}
	}()

	// 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）
	signalChan := make(chan os.Signal)
	signal.Notify(signalChan, os.Interrupt)
	sig := <-signalChan
	log.Println("Get signal: ", sig)
	log.Println("Shutdown server ...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := server.Shutdown(ctx); err != nil {
		log.Fatal("server shutdown", err)
	}

	log.Println("server exiting")

}
